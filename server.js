// Simple server for Grade Scan Scribe AI
const http = require('http');

// Create a server
const server = http.createServer((req, res) => {
  // Set CORS headers
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type');
  
  // Handle preflight requests
  if (req.method === 'OPTIONS') {
    res.writeHead(204);
    res.end();
    return;
  }
  
  // Set content type to JSON
  res.setHeader('Content-Type', 'application/json');
  
  // Handle different endpoints
  if (req.url === '/api/openai' && req.method === 'POST') {
    // Mock OpenAI response
    const mockResponse = {
      choices: [
        {
          message: {
            content: "This is a model answer generated by the server. It includes key concepts, explanations, and examples related to the question."
          }
        }
      ]
    };
    
    res.writeHead(200);
    res.end(JSON.stringify(mockResponse));
  } 
  else if (req.url === '/api/huggingface' && req.method === 'POST') {
    // Mock HuggingFace response
    const mockResponse = [
      {
        generated_text: "This is a model answer generated by the server. It includes key concepts, explanations, and examples related to the question."
      }
    ];
    
    res.writeHead(200);
    res.end(JSON.stringify(mockResponse));
  }
  else if (req.url === '/api/connectivity' && req.method === 'GET') {
    // Mock connectivity response
    res.writeHead(200);
    res.end(JSON.stringify({ connected: true }));
  }
  else {
    // Not found
    res.writeHead(404);
    res.end(JSON.stringify({ error: 'Not found' }));
  }
});

// Start the server
const PORT = 3000;
server.listen(PORT, () => {
  console.log(`Server running at http://localhost:${PORT}/`);
});
