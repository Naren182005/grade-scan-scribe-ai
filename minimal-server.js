/**
 * Minimal server implementation for Grade Scan Scribe AI
 */

const express = require('express');
const cors = require('cors');
const dotenv = require('dotenv');

// Load environment variables from .env file
dotenv.config();

// Server configuration
const app = express();
const PORT = process.env.PORT || 3000;

// Log that this is a minimal server
console.log('Starting minimal server - this server provides mock responses and does not make actual API calls');

// Middleware
app.use(express.json({ limit: '50mb' }));
app.use(cors());

// Add request logging middleware
app.use((req, res, next) => {
  console.log(`${new Date().toISOString()} - ${req.method} ${req.url}`);
  next();
});

// API routes

/**
 * Connectivity check endpoint
 */
app.get('/api/connectivity', (req, res) => {
  res.json({ connected: true });
});

/**
 * OpenAI API endpoint
 */
app.post('/api/openai', (req, res) => {
  // Return a mock response
  res.json({
    choices: [
      {
        message: {
          content: `This is a model answer for the question: "${req.body.prompt || 'Unknown question'}".

The answer would typically include:
1. Key concepts and definitions
2. Detailed explanations
3. Relevant examples
4. Critical analysis
5. Conclusion

This is a mock response since the server is running in minimal mode. In a full implementation, this would be generated by OpenAI's API.`
        }
      }
    ]
  });
});

/**
 * HuggingFace API endpoint
 */
app.post('/api/huggingface', (req, res) => {
  // Return a mock response
  res.json([
    {
      generated_text: `This is a model answer for the prompt: "${req.body.inputs || 'Unknown prompt'}".

The answer would typically include:
1. Key concepts and definitions
2. Detailed explanations
3. Relevant examples
4. Critical analysis
5. Conclusion

This is a mock response since the server is running in minimal mode. In a full implementation, this would be generated by HuggingFace's API.`
    }
  ]);
});

/**
 * OCR API endpoint
 */
app.post('/api/ocr', (req, res) => {
  // Return a mock response
  res.json({
    ParsedResults: [
      {
        ParsedText: "This is a mock OCR result. In a full implementation, this would be the text extracted from the uploaded image."
      }
    ],
    OCRExitCode: 1,
    IsErroredOnProcessing: false,
    ProcessingTimeInMilliseconds: "200"
  });
});

// Start the server
app.listen(PORT, () => {
  console.log('===========================================');
  console.log(`Minimal server running on port ${PORT}`);
  console.log('===========================================');
  console.log('This is a minimal server that returns mock responses.');
  console.log('It does not make actual API calls but allows the client to function.');
  console.log('===========================================');
  console.log('Server endpoints:');
  console.log('- GET  /api/connectivity - Always returns connected: true');
  console.log('- POST /api/huggingface  - Returns mock generated text');
  console.log('- POST /api/openai       - Returns mock generated text');
  console.log('- POST /api/ocr          - Returns mock OCR results');
  console.log('===========================================');
});
